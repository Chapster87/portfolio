---
import { markdownify } from "@/lib/utils/textConverter";
import { undefined } from "astro:schema";

const { feature_data } = Astro.props;
const { featureSections } = feature_data;
---

<div class="collapse-wrapper">
  <h2>Features & Enhancements - By Section</h2>
  {featureSections.map((group, i) => {
    const { section, id, summary, features } = group;
    return (
      <>
        {features && features.length > 0 && (
          <div id={id} class="collapse themed collapse-arrow">
            {i === 0 ? (
              <input type="checkbox" aria-labelledby="section-global" checked/>
            ) : (
              <input type="checkbox" aria-labelledby="section-global" />
            )}
            
            <h3 id="section-global" class="collapse-title">{section}</h3>
            <div class="collapse-content">
              {summary && (<p>{summary}</p>)}
              <ol>
                {features.map((feature, i) => {
                  const { title, desc } = feature;
                  return (
                    <li>
                      {title && (<span class="underline" set:html={markdownify(title)}/>)}
                        {(typeof desc !== 'object' && (desc !== null && desc !== undefined)) && ( 
                          <ul>
                            <li set:html={markdownify(desc)}/>
                          </ul>
                        )}
                        {(typeof desc === 'object' && (desc !== null && desc !== undefined)) &&  (
                          <ul style="list-style: lower-latin;">
                            {desc.map((subFeature, i) => {
                              const { title, desc } = subFeature;
                              return (
                                <li>
                                  {title && (<span set:html={markdownify(title)}/>)}
                                  {(typeof desc !== 'object' && (desc !== null && desc !== undefined)) && ( 
                                    <ul>
                                      <li set:html={markdownify(desc)}/>
                                    </ul>
                                  )}
                                  {(typeof desc === 'object' && (desc !== null && desc !== undefined)) &&  (
                                    <ul>
                                      {desc.map((subSubFeature, i) => {
                                        const { title, desc } = subSubFeature;
                                        return (
                                          <li>
                                            {title && (<span set:html={markdownify(title)}/>)}
                                            {desc !== null && desc !== undefined &&  (
                                              <ul>
                                                <li set:html={markdownify(desc)}/>
                                              </ul>
                                            )}
                                          </li>
                                        );
                                      })}
                                    </ul>
                                  )}
                                </li>
                              );
                            })}
                          </ul>
                        )}
                    </li>
                  )
                })}
              </ol>
            </div>
          </div>
        )}
      </>
    )
  })}
</div>
