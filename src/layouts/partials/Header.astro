---
import Logo from "@/components/core/Logo.astro";
import ThemeToggle from "@/components/core/ThemeToggle.astro";
import menu from "@/config/menu.json";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;
---

<header class="header border-b-2 border-secondary">
  <nav class="navbar container !bg-transparent">
    <!-- logo -->
    <div class="order-2 lg:order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label id="show-button" for="nav-toggle" class="order-0 flex cursor-pointer items-center lg:order-3 lg:hidden mr-6">
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label id="hide-button" for="nav-toggle" class="order-1 hidden cursor-pointer items-center lg:order-4 mr-6">
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="list-none navbar-nav order-4 hidden w-full ml-0 lg:order-1 lg:flex lg:w-auto lg:space-x-2 p-6 lg:p-0"
    >
      {
        main.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item mb-0 lg:mt-1.5 nav-dropdown group relative cursor-pointer dropdown-button">
                <span
                  class={`nav-link text-2xl font-bold inline-flex items-center ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul
                  id="dropdown"
                  class="list-none ml-0 nav-dropdown-list"
                >
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "text-secondary"
                        }`}
                        aria-label={child.name}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item mb-0 lg:mt-1.5">
                <a
                  href={menu.url}
                  class={`nav-link text-2xl font-bold inline-block lg:block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active"
                  }`}
                  aria-label={menu.name}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
    </ul>
    <div class="order-3 items-center md:order-2 md:ml-0 lg:relative lg:right-0 lg:flex lg:top-0 p-3">
      <ThemeToggle />
    </div>
  </nav>
</header>


<script is:inline>
  function initDropdownListeners() {
    document.querySelectorAll(".dropdown-button").forEach((button) => {
      const dropdown = button.closest(".nav-dropdown");
      function toggleDropdown(e) {
        e.stopPropagation(); 
        dropdown.classList.toggle("open");

        document.querySelectorAll(".nav-dropdown").forEach((otherDropdown) => {
          if (otherDropdown !== dropdown) {
            otherDropdown.classList.remove("open");
          }
        });
      }
      button.removeEventListener("click", toggleDropdown);
      button.addEventListener("click", toggleDropdown);
    });
  }
  
  document.addEventListener("astro:page-load", () => {
    initDropdownListeners();
  });
</script>
